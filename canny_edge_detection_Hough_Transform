

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import cv2

#read the image
image = mpimg.imread('exit-ramp.jpg')

#grayscale conversion
gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

#define a kernel size and apply gaussian smoothing
#by default the GaussianBlur function applies smoothing of size 5
kernel_size = 5
blur_gray = cv2.GaussianBlur(gray,(kernel_size, kernel_size), 0)

#define parameters for canny edge detection and apply
low_threshold = 50
high_threshold = 150
edges = cv2.Canny(gray, low_threshold, high_threshold)

#create masked edges image using a cv2.fillPoly()
mask = np.zeros_like(edges)
ignore_mask_color = 100

#define a four sided polygon to mask
imshape = image.shape
vertices = np.array([[(0, 530), (450, 300), (490,300), (imshape[1], 530)]], dtype=np.int32)
cv2.fillPoly(mask, vertices, ignore_mask_color)
masked_edges = cv2.bitwise_and(edges, mask)

#hough tranform parameters
#make blank same size as image to draw on
rho = 2                     #distance resolution in pizels of Hough grid
theta = np.pi/180           #angular resolution in radians of the Hough grid
threshold = 15              #minimum number of votes
min_line_length = 40        #minimum number of pixels making up a line
max_line_gap = 20           #maximum gap in pixels between connected line segments

#create a blank to draw links on
line_image = np.copy(image)*0

#run hough space on edge detected image
#output "lines" is array containing endpoints of detected line segments
lines = cv2.HoughLinesP(masked_edges, rho, theta, threshold, np.array([]), min_line_length, max_line_gap)

#iterate over the output "lines" and draw lines on a blank image
for line in lines:
    for x1,y1,x2,y2 in line:
        cv2.line(line_image, (x1,y1), (x2,y2), (255,0,0), 10)

#create a color binary image to combine with line image
color_edges = np.dstack((edges, edges, edges))

#draw the lines on edge image
line_edges = cv2.addWeighted(color_edges, 0.8, line_image,1, 0)

#show the image
plt.imshow(line_edges)
plt.show()
